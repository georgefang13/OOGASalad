{
    "states": {
        "INIT": {
            "init": "to floor [ :x ] [\n    return - :x % :x 1\n]\nto returnstr [ :s ] [\n    return :s\n]\nto updatemoney [ ] [\n    foreach [ :item fromgameclass \"moneytext ] [\n        removepiece :item\n    ]\n    \n    for [ :i 0 :game_playerCount 1 ] [\n        make :player getplayer :i\n        make :money item 0 fromplayer :player \"money\n        addtextobj :money fromgame + \"playermoneydz + :i 1 \"moneytext to moneyfunc [ :str ] [ return + \"money%20=%20 :str ]\n    ]\n    \n]\nif == null :startgame [\n    make :startgame true\n    updatemoney\n]\nmake :doubles false",
            "leave": "",
            "setValue": "",
            "to": "make :game_state_output \"ROLL"
        },
        "ROLL": {
            "init": "\nmake :dice fromgame \"dice\nmakeavailable :dice\n",
            "leave": "",
            "setValue": "make :game_doubles false\nmake :num1 + 1 floor rand 6\nmake :num2 + 1 floor rand 6\nmake :roll + :num1 :num2\nif == :num1 :num2 [\n    make :doubles true\n]\n\nmake :rollcombo ( + :num1 \",%20 :num2 )\nif == 0 len fromgameclass \"rolltext [\n    addtextobj :rollcombo :game_dicerolldz \"rolltext fvar returnstr\n]\n\nif == :num1 :num2 [ \n    make :game_doubles true\n]",
            "to": "make :game_state_output \"SELECT_PIECE"
        },
        "SELECT_PIECE": {
            "init": "makeavailable item 0 fromplayer curplayer \"piece",
            "leave": "",
            "setValue": "make :piece_selected fromgame :game_state_input",
            "to": "make :game_state_output \"MOVE_PIECE"
        },
        "MOVE_PIECE": {
            "init": "make :piece item 0 fromplayer curplayer \"piece\nmake :dz objdz :piece\nrepeat :roll [\n    make :dz dzfollow :dz [ \"Forward ]\n    if == getid :dz \"go [\n        additem \"passgo :game_log\n        make :moneyid getid item 0 fromplayer curplayer \"money\n        make :money fromgame :moneyid\n        make :money + :money 200\n        setfromid :moneyid :money\n        updatemoney\n    ]\n]\nmakeavailable :dz",
            "leave": "",
            "setValue": "\nmovepiece :piece fromgame :game_state_input\n\nmake :dz objdz :piece\nif hasclass :dz \"chancedz [\n    make :chances fromgameclass \"chance\n    make :ind rand len :chances\n    make :chancecard item :ind :chances\n    movepiece :chancecard :game_chancediscarddz\n    getrule :chancecard \"action [ ]\n]\n\nif hasclass :dz \"ccdz [\n    make :ccs fromgameclass \"cc\n    make :ind rand len :ccs\n    make :cccard item :ind :ccs\n    movepiece :cccard :game_ccdiscarddz\n    getrule :cccard \"action [ ]\n]\n",
            "to": "\nmake :piece item 0 fromplayer curplayer \"piece\nmake :dz objdz :piece\nifelse == getid :dz \"goToJail [\n    make :jaildz fromgame \"jail\n    movepiece :piece :jaildz\n    make :game_state_output \"DONE\n] [\n    make :card fromgame + getid :dz \"card\n    ifelse != null :card [\n        ifelse  hasclass :card \"purchase [\n            make :game_state_output \"PROMPT_BUY\n        ] [\n            \n            if != curplayer owner :card [\n                make :cost item 0 objchildrenofclass :card \"rent\n                \n                make :moneyid getid item 0 fromplayer curplayer \"money\n                make :money fromgame :moneyid\n                make :money - :money :cost\n                setfromid :moneyid :money\n            ]\n            \n            ifelse == 0 len fromplayer curplayer \"properties [\n                make :game_state_output \"DONE \n            ] [\n                make :game_state_output \"TRADE_ASK \n            ]\n            \n        ]\n    ] [\n        ifelse == 0 len fromplayer curplayer \"properties [\n            make :game_state_output \"DONE \n        ] [\n            make :game_state_output \"TRADE_ASK \n        ]\n    ]\n]\n"
        },
        "PROMPT_BUY": {
            "init": "make :dz objdz :piece\nmake :card fromgame + getid :dz \"card\nmake :cost item 0 objchildrenofclass :card \"cost\nmake :prompt_dz1 fromgame \"promptdz1\nmake :prompt_dz2 fromgame \"promptdz2\nmake :prompt1 + \"Buy%20this%20property%20for%20$ :cost \nmake :prompt2 \"Dont%20buy%20this%20property\naddtextobj :prompt1 :prompt_dz1 \"ask_yes.ask fvar returnstr\naddtextobj :prompt2 :prompt_dz2 \"ask_no.ask fvar returnstr\nmakeallavailable fromgameclass \"ask",
            "leave": "",
            "setValue": "make :btn fromgame :game_state_input\nif hasclass :btn \"ask_yes [ \n    make :dz objdz :piece\n    make :card fromgame + getid :dz \"card\n    make :cost item 0 objchildrenofclass :card \"cost\n    make :moneyid getid item 0 fromplayer curplayer \"money\n    make :money fromgame :moneyid\n    make :money - :money :cost\n    additem :money :game_log\n    setfromid :moneyid :money\n    removeclass \"purchase :card\n    \n    movepiece :card fromgame + \"playerdz + :game_turn 1\n]",
            "to": "ifelse == 0 len fromplayer curplayer \"properties [\n    make :game_state_output \"DONE \n] [\n    make :game_state_output \"TRADE_ASK \n]"
        },
        "TRADE_ASK": {
            "init": "make :prompt1 \"Trade\nmake :prompt2 \"Don't%20trade\n\nmake :prompt_dz1 fromgame \"promptdz1\nmake :prompt_dz2 fromgame \"promptdz2\n\naddtextobj :prompt1 :prompt_dz1 \"ask_yes.ask fvar returnstr\naddtextobj :prompt2 :prompt_dz2 \"ask_no.ask fvar returnstr\nmakeallavailable fromgameclass \"ask",
            "leave": "",
            "setValue": "\n    removepiece item 0 fromgameclass \"ask_yes\n    removepiece item 0 fromgameclass \"ask_no\n",
            "to": "ifelse doubles [\n    make :game_state_output \"ROLL \n] [\n    make :game_state_output \"DONE \n]"
        },
        "DONE": {
            "init": "",
            "leave": "if not :doubles [ gotonextplayer ]",
            "setValue": "",
            "to": "ifelse :doubles [ make :game_state_output \"ROLL ] [ make :game_state_output \"INIT ]"
        }
    },
    "goals": []
}