{
  "Sum": {
    "name": "Sum",
    "folder": "operators",
    "str": "+",
    "description": "Adds two numbers together",
    "example": "+ 1 2 # + <number> <number>",
    "specs": {
      "inner": false,
      "inputs": [
          {
          "name": "a",
          "type": ["number", "string"]
          },
          {
          "name": "b",
          "type": ["number", "string"]
          }
      ],
      "outputs": ["number", "string", "string", "string"],
      "parse": "+ %s %s"
    }
  },
  "Difference": {
    "name": "Difference",
    "folder": "operators",
    "str": "-",
    "description": "Subtracts one number from another",
    "example": "- 1 2 # - <number> <number>",
    "specs": {
      "inner": false,
      "inputs": [
        {
          "name": "a",
          "type": ["number"]
        },
        {
          "name": "b",
          "type": ["number"]
        }
      ],
      "outputs": ["number"],
      "parse": "- %s %s"
    }
  },
  "Product": {
    "name": "Product",
    "folder": "operators",
    "str": "*",
    "description": "Multiplies two numbers together",
    "example": "* 1 2 # * <number or boolean> <number or boolean>",
    "specs": {
      "inner": false,
      "inputs": [
        {
          "name": "a",
          "type": ["number", "boolean"]
        },
        {
          "name": "b",
          "type": ["number", "boolean"]
        }
      ],
      "outputs":  "number",
      "parse": "* %s %s"
    }
  },
  "Quotient": {
    "name": "Quotient",
    "folder": "operators",
    "str": "/",
    "description": "Divides one number by another",
    "example": "/ 1 2 # / <number> <number>",
    "specs": {
      "inner": false,
      "inputs": [
        {
          "name": "a",
          "type": ["number"]
        },
        {
          "name": "b",
          "type": ["number"]
        }
      ],
      "outputs":  "number",
      "parse": "/ %s %s"
    }
  },
  "Remainder": {
    "name": "Remainder",
    "folder": "operators",
    "str": "%",
    "description": "Finds the remainder after division",
    "example": "% 1 2 # % <number> <number>",
    "specs": {
      "inner": false,
      "inputs": [
        {
          "name": "a",
          "type": ["number"]
        },
        {
          "name": "b",
          "type": ["number"]
        }
      ],
      "outputs": "number",
      "parse": "% %s %s"
    }
  },
  "Minus": {
    "name": "Minus",
    "folder": "operators",
    "str": "~",
    "description": "Negates a number",
    "example": "~ 1 # ~ <number>",
    "specs": {
      "inner": false,
      "inputs": [
        {
          "name": "a",
          "type": ["number"]
        },
        {
          "name": "b",
          "type": ["number"]
        }
      ],
      "outputs":  "number",
      "parse": "~ %s %s"
    }
  },
  "Random": {
    "name": "Random",
    "folder": "operators",
    "str": "rand",
    "description": "Generates a random number between 0 and 1",
    "example": "rand",
    "specs": {
      "inner": false,
      "inputs": [],
      "outputs": "number",
      "parse": "~ %s %s"
    }
  },
  "RandomRange": {
    "name": "Random Range",
    "folder": "operators",
    "str": "randr",
    "description": "Generates a random number within a specified range",
    "example": "randr 1 10 # randr <min> <max>"
  },
  "Sine": {
    "name": "Sine",
    "folder": "operators",
    "str": "sin",
    "description": "Finds the sine of an angle",
    "example": "sin 1 # sin <number>"
  },
  "Cosine": {
    "name": "Cosine",
    "folder": "operators",
    "str": "cos",
    "description": "Finds the cosine of an angle",
    "example": "cos 1 # cos <number>"
  },
  "Tangent": {
    "name": "Tangent",
    "folder": "operators",
    "str": "tan",
    "description": "Finds the tangent of an angle",
    "example": "tan 1 # tan <number>"
  },
  "ArcTangent": {
    "name": "ArcTangent",
    "folder": "operators",
    "str": "atan",
    "description": "Finds the arctangent of a number",
    "example": "atan 1 # atan <number>"
  },
  "SquareRoot": {
    "name": "SquareRoot",
    "folder": "operators",
    "str": "sqrt",
    "description": "Finds the square root of a number",
    "example": "sqrt 81 # sqrt <number>"
  },
  "NaturalLog": {
    "name": "NaturalLog",
    "folder": "operators",
    "str": "ln",
    "description": "Finds the natural logarithm of a number",
    "example": "ln :e # ln <number>"
  },
  "Power": {
    "name": "Power",
    "folder": "operators",
    "str": "pow",
    "description": "Raises a number to a power",
    "example": "pow 2 3 # pow <number> <number>"
  },
  "LessThan": {
    "name": "LessThan",
    "folder": "operators",
    "str": "<",
    "description": "Tests whether one number is less than another",
    "example": "< 1 2 # < <number> <number>"
  },
  "LessEqual": {
    "name": "LessEqual",
    "folder": "operators",
    "str": "<=",
    "description": "Tests whether one number is less than or equal to another",
    "example": "<= 1 2 # <= <number> <number>"
  },
  "GreaterThan": {
    "name": "GreaterThan",
    "folder": "operators","str": ">",
    "description": "Tests whether one number is greater than another",
    "example": "> 1 2 # > <number> <number>"
  },
  "GreaterEqual": {
    "name": "GreaterEqual",
    "folder": "operators",
    "str": ">=",
    "description": "Tests whether one number is greater than or equal to another",
    "example": ">= 1 2 # >= <number> <number>"
  },
  "Equal": {
    "name": "Equal",
    "folder": "operators",
    "str": "==",
    "description": "Tests whether two values are equal",
    "example": "== 1 2 # == <value> <value>"
  },
  "NotEqual": {
    "name": "NotEqual",
    "folder": "operators",
    "str": "!=",
    "description": "Tests whether two values are not equal",
    "example": "!= 1 2 # != <value> <value>"
  },
  "And": {
    "name": "And",
    "folder": "operators",
    "str": "and",
    "description": "Tests whether two conditions are both true",
    "example": "and true false # and <condition> <condition>"
  },
  "Or": {
    "name": "Or",
    "folder": "operators",
    "str": "or",
    "description": "Tests whether at least one of two conditions is true",
    "example": "or true false"
  },
  "Not": {
    "name": "Not",
    "folder": "operators",
    "str": "not",
    "description": "Inverts the truth value of a condition",
    "example": "not :x < :y"
  },
  "Item": {
    "name": "Get List Item",
    "folder": "operators",
    "str": "item",
    "description": "Retrieves an element from a list",
    "example": "item 1 [1 2 3] # item <index> <list>"
  },
  "SetItem": {
    "name": "Set List Item",
    "folder": "operators",
    "str": "setitem",
    "description": "Sets the value of an element in a list",
    "example": "setitem 1 [1 2 3] 4 # -> [1 4 3] -- setitem <index> <list> <value>"
  },
  "RemoveItem": {
    "name": "Remove List Item",
    "folder": "operators",
    "str": "delitem",
    "description": "Removes the value of at index i in a list",
    "example": "delitem 1 [1 2 3] # -> [1 3] -- delitem <index> <list>"
  },
  "AddItem": {
    "name": "Add List Item",
    "folder": "operators",
    "str": "additem",
    "description": "Adds the value of an element in a list",
    "example": "additem 1 [1 2 3] # -> [1 2 3 1] -- additem <value> <list>"
  },
  "GetAttribute": {
    "name": "Get Attribute",
    "folder": "operators",
    "str": "attr",
    "description": "Retrieves an attribute from a GameObject",
    "example": "attr :game_x \"position # attr <gameobject> <attribute>"
  },
  "FromGame": {
    "name": "Get Game Object",
    "folder": "operators",
    "str": "fromgame",
    "description": "Retrieves an item from the id manager",
    "example": "fromgame \"x :game_y # fromgame <var_name>"
  },
  "GetDropZoneItems": {
    "name": "Get Drop Zone Items",
    "folder": "operators",
    "str": "dzitems",
    "description": "Retrieves all the items in a drop zone",
    "example": "dzitems :game_y # dzitems <dropzone>"
  },
  "GetDropZoneItem": {
    "name": "Get Drop Zone Item",
    "folder": "operators",
    "str": "dzitem",
    "description": "Retrieves the item with a specific name within in a drop zone",
    "example": "dzitem \"x :game_y # dzitem <name> <dropzone>"
  },
  "AddDropZoneItem": {
    "name": "Add Drop Zone Item",
    "folder": "operators",
    "str": "putdzitem",
    "description": "Puts an item with a specific name within in a drop zone",
    "example": "putdzitem \"x 1 :game_y # putdzitem <name> <value> <dropzone>"
  },
  "DropZonePaths": {
    "name": "Get All Drop Zone Paths",
    "folder": "operators",
    "str": "dzpaths",
    "description": "Gets a list of all paths a dropzone can take",
    "example": "dzpaths :game_zone # dzpaths <dropzone>"
  },
  "FollowDropZonePath": {
    "name": "Follow a Path Through Dropzones",
    "folder": "operators",
    "str": "dzfollow",
    "description": "Gets the next dropzone in a path",
    "example": "dzfollow :game_zone [ \"Up \"Up \"Right ] # dzpaths <dropzone> <list of edges>"
  },
  "DropZoneFollowUntilBlocked": {
    "name": "Follow a Path Through Dropzones Until That Path is Blocked",
    "folder": "operators",
    "str": "dzfollowtoblock",
    "description": "Gets all dropzones among a repeated path until the path is blocked or no longer exists",
    "example": "dzfollowtoblock :game_zone [ \"Up \"UpRight ] fvar blocked_func # dzpaths <dropzone> <list of edges> <blocked function>"
  },
  "Length": {
    "name": "Length",
    "folder": "operators",
    "str": "len",
    "description": "Gets the length of a list",
    "example": "len [1 2 3] # -> 3 -- len <list>"
  },
  "MakeVariable": {
    "name": "Make Variable",
    "folder": "",
    "str": "make",
    "description": "Creates a new variable and sets its value",
    "example": "make :x 1 # make <var_name> <value>"
  },
  "Global": {
    "name": "Global",
    "folder": "control",
    "str": "global",
    "description": "Declares a variable to be global",
    "example": "global :x # global <var_name>"
  },
  "Repeat": {
    "name": "Repeat",
    "folder": "control",
    "str": "repeat",
    "description": "Repeats a set of instructions a specified number of times",
    "example": "repeat 10 [print \"hello] # repeat <number> <instructions>"
  },
  "DoTimes": {
    "name": "DoTimes",
    "folder": "control",
    "str": "dotimes",
    "description": "Repeats a set of instructions a specified number of times, with a counter variable",
    "example": "dotimes [ :i 10 ] [ ... ] # dotimes [ <var_name> <number>  ] [ <instructions> ]"
  },
  "For": {
    "name": "For",
    "folder": "control",
    "str": "for",
    "description": "Repeats a set of instructions for each element in a list",
    "example": "for [ :i 0 5 1 ] [ ... ] # for [ <var_name> <min> <max> <optional increment (default 1)> ] [ <instructions> ]"
  },
  "Foreach": {
    "name": "For Each",
    "folder": "control",
    "str": "foreach",
    "description": "Loop over each element in a list",
    "example": "foreach [ :x [ 1 2 3 ] ] [ ... ] # for [ <var_name> <list> > ] [ <instructions> ]"
  },
  "If": {
    "name": "If",
    "folder": "control",
    "str": "if",
    "description": "Executes a set of instructions if a condition is true",
    "example": "if [ < :x :y ] [ ... ] # if [ <condition> ] [ <instructions> ]"
  },
  "IfElse": {
    "name": "IfElse",
    "folder": "control",
    "str": "ifelse",
    "description": "Executes one set of instructions if a condition is true, and another set if it is false",
    "example": "ifelse [ >= :x  :y ] [ ... ] [ ... ] # ifelse [ <condition> ] [ <instructions if true> ] [ <instructions if false> ]"
  },
  "Del": {
    "name": "Del",
    "folder": "control",
    "str": "del",
    "description": "Removes a variable form scope",
    "example": "del :x # del <var_name>"
  },
  "MakeUserInstruction": {
    "name": "Make Function",
    "folder": "control",
    "str": "to",
    "description": "Defines a new user-defined command",
    "example": "to mycommand [ :x :y ] [ ... ] # to <command_name> [ <arg1> <arg2> ... ] [ <instructions> ]"
  },
  "FVar": {
    "name": "Function Variable",
    "folder": "control",
    "str": "fvar",
    "description": "Puts a command / function inside a variable",
    "example": "fvar command # fvar <command_name>"
  },
  "Call": {
    "name": "Call Function Variable",
    "folder": "control",
    "str": "call",
    "description": "Calls a command that's contained inside a variable",
    "example": "call :func_var # call <var_name>"
  }
}